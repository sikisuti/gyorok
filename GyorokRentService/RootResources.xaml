<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:GyorokRentService"
                    xmlns:conv="clr-namespace:GyorokRentService.Converters"
             xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:valid="clr-namespace:GyorokRentService.Validations">

    <sys:Double x:Key="GlobalFontSize">16</sys:Double>
    <FontWeight x:Key="GlobalFontWeight">Normal</FontWeight>
    
    <Style TargetType="{x:Type Label}">
        <Setter Property="FontSize" Value="{StaticResource GlobalFontSize}"/>
        <Setter Property="FontWeight" Value="{StaticResource GlobalFontWeight}" />
    </Style>
    <Style TargetType="{x:Type ListBox}">
        <Setter Property="FontSize" Value="{StaticResource GlobalFontSize}"/>
        <Setter Property="FontWeight" Value="{StaticResource GlobalFontWeight}" />
    </Style>
    <Style TargetType="{x:Type TextBox}">
        <Setter Property="FontSize" Value="{StaticResource GlobalFontSize}"/>
        <Setter Property="FontWeight" Value="{StaticResource GlobalFontWeight}" />
    </Style>
    

    <conv:BooleanToVisibilityConverter x:Key="boolToVis"/>
    <conv:BoolInverterConverter x:Key="boolInverter" />
    <conv:ObjectExistsToBool x:Key="objectExistsToBool" />
    <conv:FilterTypeToButtonBorderBrush x:Key="filterTypeToBorder"/>
    <local:FilledToVisibilityConverter x:Key="fillToVis"/>
    <local:BooleanToReadOnlyTextBgConverter x:Key="readOnlyToBg"/>
    <local:BooleanToReadOnlyTextBorderConverter x:Key="readOnlyToBorder"/>
    <local:MultiBooleanToBooleanConverter x:Key="multiBoolToBool"/>

    <Color x:Key="RentBackgroundColor">#FFF0FFF0</Color>
    <Color x:Key="RentSubColor1">#FFB0FFB0</Color>
    <Color x:Key="RentSubColor2">#FFC0FFC0</Color>

    <SolidColorBrush x:Key="RentBgBrush" Color="#FFF0FFF0"/>

    <LinearGradientBrush x:Key="RentSubBackground1" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="{StaticResource RentSubColor1}" Offset="0" />
        <GradientStop Color="{StaticResource RentBackgroundColor}" Offset="1" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="RentSubBackground2" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="{StaticResource RentSubColor2}" Offset="0" />
        <GradientStop Color="{StaticResource RentBackgroundColor}" Offset="1" />
    </LinearGradientBrush>

    <Style x:Key="StyleRentSub1" TargetType="{x:Type TabItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid Width="200" Height="30">
                        <Border Name="Border" Background="{StaticResource RentSubBackground1}" BorderBrush="Black" BorderThickness="1,1,1,0">
                            <ContentPresenter x:Name="ContentSite" VerticalAlignment="Center" HorizontalAlignment="Center" ContentSource="Header" RecognizesAccessKey="True"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource RentBgBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="StyleRentSub2" TargetType="{x:Type TabItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid Width="200">
                        <Border Name="Border" Background="{StaticResource RentSubBackground2}" BorderBrush="Black" BorderThickness="1,1,1,0">
                            <ContentPresenter x:Name="ContentSite" VerticalAlignment="Center" HorizontalAlignment="Center" ContentSource="Header" RecognizesAccessKey="True"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource RentBgBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CustomEditableTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="IsReadOnly" Value="{Binding isEditable, Converter={StaticResource boolInverter}}"/>
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FontSize" Value="{StaticResource GlobalFontSize}" />
        <Setter Property="FontWeight" Value="{StaticResource GlobalFontWeight}" />
        <Style.Triggers>
            <Trigger Property="IsReadOnly" Value="true">
                <Setter Property="Background" Value="{StaticResource RentBgBrush}"/>
                <Setter Property="BorderThickness" Value="0"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="CustomEditableDatePicker" TargetType="{x:Type xctk:DateTimePicker}">
        <Setter Property="IsReadOnly" Value="{Binding isEditable, Converter={StaticResource boolInverter}}"/>
        <Setter Property="AutoCloseCalendar" Value="True"/>
        <Setter Property="ShowButtonSpinner" Value="False"/>
        <Setter Property="Format" Value="LongDate"/>
        <Setter Property="FontSize" Value="{StaticResource GlobalFontSize}"/>
        <Setter Property="FontWeight" Value="{StaticResource GlobalFontWeight}" />
        <Style.Triggers>
            <Trigger Property="IsReadOnly" Value="true">
                <Setter Property="Background" Value="{StaticResource RentBgBrush}"/>
                <Setter Property="BorderThickness" Value="0"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="validationErrorTemplate">
        <DockPanel>
            <StackPanel Orientation="Horizontal" DockPanel.Dock="Left">
                <Grid Width="12" Height="12">
                    <Ellipse Width="12" Height="12" 
                            Fill="Red" HorizontalAlignment="Center" 
                            VerticalAlignment="Center"
                     
                     ></Ellipse>
                    <TextBlock Foreground="White" FontWeight="Heavy" 
                            FontSize="8" HorizontalAlignment="Center" 
                            VerticalAlignment="Center" TextAlignment="Center"
                            ToolTip="{Binding ElementName=ErrorAdorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}">X</TextBlock>
                </Grid>
                <TextBlock Foreground="Red" FontSize="12" Margin="2,0,0,0" VerticalAlignment="Center"
                   Text="{Binding ElementName=ErrorAdorner, 
                   Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"
                   ></TextBlock>
            </StackPanel>
            <AdornedElementPlaceholder 
        x:Name="ErrorAdorner" ></AdornedElementPlaceholder>
        </DockPanel>
    </ControlTemplate>


</ResourceDictionary>