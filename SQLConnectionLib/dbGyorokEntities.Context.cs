//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SQLConnectionLib
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class dbGyorokEntities : DbContext
    {
        public dbGyorokEntities()
            : base("name=dbGyorokEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Cities> Cities { get; set; }
        public virtual DbSet<Contacts> Contacts { get; set; }
        public virtual DbSet<Customers> Customers { get; set; }
        public virtual DbSet<ErrorTypes> ErrorTypes { get; set; }
        public virtual DbSet<Parts> Parts { get; set; }
        public virtual DbSet<PayTypes> PayTypes { get; set; }
        public virtual DbSet<RentalGroups> RentalGroups { get; set; }
        public virtual DbSet<Rentals> Rentals { get; set; }
        public virtual DbSet<ServiceGroups> ServiceGroups { get; set; }
        public virtual DbSet<ServiceStatuses> ServiceStatuses { get; set; }
        public virtual DbSet<ServiceWorksheets> ServiceWorksheets { get; set; }
        public virtual DbSet<SystemParameters> SystemParameters { get; set; }
        public virtual DbSet<Tools> Tools { get; set; }
        public virtual DbSet<ToolStatuses> ToolStatuses { get; set; }
        public virtual DbSet<TableVersions> TableVersions { get; set; }
        public virtual DbSet<DetailedCustomers> DetailedCustomers { get; set; }
        public virtual DbSet<RentalSum> RentalSum { get; set; }
        public virtual DbSet<ServiceSum> ServiceSum { get; set; }
        public virtual DbSet<SimpleParts> SimpleParts { get; set; }
    
        public virtual int DoBackup(string path)
        {
            var pathParameter = path != null ?
                new ObjectParameter("path", path) :
                new ObjectParameter("path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DoBackup", pathParameter);
        }
    }
}
